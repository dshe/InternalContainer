Register(concreteType)
Register(superType, concreteType)
Register(superType)

if concrete type has been registered?
	error

if (assume super)
	super, concrete = all assignables
if super, concrete


GetInstance(superType)
if supertype has been registered
{
	if there is one concrete type
		return an insance of the concrete type
	// more than 1
	error
}
if enumerable
{
	register enumerable and return list of types assignable to supertype
}

if AutoRegistrationDisabled
	error

REGISTER
find list of types assignable to type
if not one type
	error
register type
return create instance

GetInstance(enumerable type)
if supertype has been registered
{
	if there is one concrete type
		return an insance of the concrete type
	error
}
if concrete type has been registered?
	error
if AutoRegistrationDisabled
	error
find list of types assignable to type
if not one type
	error
register type
return create instance